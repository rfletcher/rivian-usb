#!/usr/bin/env bash
#
# Summary: Display help for riv, or a command
#
# Usage: riv help [opts] [command]
#
# Help content are parsed from from a command's source file.
#
# A command is considered documented if it starts with a comment block that has
# a `Summary:' or `Usage:' section. Usage instructions can span multiple lines
# as long as subsequent lines are indented. The remainder of the comment block
# is displayed as extended documentation.
#
# Options:
#   -u: Only print usage for the specified command, not the full docs
#
# Examples:
#   Show general `riv` help:
#     riv help
#   Show help for a the `riv config` command:
#     riv help config
#   Show just the usage details for `riv config`:
#     riv help -u config

set -e

source "${_RIV_ROOT}/share/riv/lib/stdlib.bash" || exit 1

# Provide riv completions
if [[ "$1" == "--complete" ]]; then
  exec riv-commands --command-only
  exit
fi

# all commands meant for humans
if [[ "$1" == "--commands" ]]; then
  shift
  ONLY_COMMANDS=1
  USEFUL_COMMANDS=$(riv-commands --command-only | grep -Ev '^(completions)$')
# some of the more useful commands, highlighted in the `riv help` output
else
  read -r -d '' USEFUL_COMMANDS <<-EOT || true
    commands
    help
	EOT
  USEFUL_COMMANDS="    $USEFUL_COMMANDS"
fi

function collect_documentation() {
  $(type -p gawk awk | head -1) '
    /^Summary:/ {
      summary = substr($0, 10)
      next
    }
    /^Usage:/ {
      reading_usage = 1
      usage = usage "\n" $0
      next
    }
    /^( *$|       )/ && reading_usage {
      usage = usage "\n" $0
      next
    }
    {
      reading_usage = 0
      help = help "\n" $0
    }
    function escape(str) {
      gsub(/[`\\$"]/, "\\\\&", str)
      return str
    }
    function trim(str) {
      sub(/^\n*/, "", str)
      sub(/\n*$/, "", str)
      return str
    }
    END {
      if (usage || summary) {
        print "SUMMARY=\"" escape(trim(summary)) "\""
        print "USAGE=\"" escape(trim(usage)) "\""
        print "HELP=\"" escape(trim(help)) "\""
      }
    }
  '
}

function command_path() {
  command -v "riv-${COMMAND}" ||
  command -v "riv-${COMMAND}-sh" ||
  true
}

function documentation_for() {
  local FILENAME="$(command_path "$1")"

  if [[ -n "$FILENAME" ]]; then
    extract_initial_comment_block < "$FILENAME" |
    collect_documentation
  fi
}

function extract_initial_comment_block() {
  local PREFIX='\([#\/]\)'
  sed -ne "
    /^${PREFIX}/ !{
      q
    }
    s/^${PREFIX}$/\1 /
    /^${PREFIX} / {
      s/^${PREFIX} //
      p
    }
  "
}

function help() {
  awk '/^[^#]/{p=0} /^# Help:/{p=1} p' "$1" |
  sed "s/^# Help: //;s/^# //;s/^#//"
}

function print_help() {
  local command="$1"
  local summary usage help
  eval "$(documentation_for "$COMMAND")"

  if [ -n "$USAGE" -o -n "$SUMMARY" ]; then
    if [ -n "$SUMMARY" ]; then
      echo "$SUMMARY"
      echo
    fi
    if [ -n "$USAGE" ]; then
      echo "$USAGE"
    else
      echo "Usage: riv ${COMMAND}"
    fi
    if [ -n "$HELP" ]; then
      echo
      echo "$HELP"
    fi
  else
    echo "Sorry, this command isn't documented yet." >&2
    return 1
  fi
}

function print_summaries() {
  local LENGTH=$(
    echo "$USEFUL_COMMANDS" |
    __strip_heredoc |
    awk '{ print length }' |
    sort -nr |
    head -1
  )

  for COMMAND; do
    print_summary "$COMMAND" "$LENGTH"
  done
}

function print_summary() {
  local COMMAND="$1"
  local LENGTH="$2"
  local INDENT SUMMARY USAGE HELP
  eval "$(documentation_for "$COMMAND")"

  if [ "$ONLY_COMMANDS" == "" ]; then
    INDENT="  riv "
  else
    INDENT=""
  fi

  # if [ -n "$SUMMARY" ]; then
    printf "%s%-${LENGTH}s   %s\n" "$INDENT" "$COMMAND" "$SUMMARY"
  # fi
}

function print_usage() {
  local COMMAND="$1"
  local SUMMARY USAGE HELP
  eval "$(documentation_for "$COMMAND")"
  [ -z "$USAGE" ] || echo "$USAGE"
}

unset USAGE
if [[ "$1" == "-u" ]]; then
  USAGE="1"
  shift
  if [[ -z "$1" ]]; then
    riv help -u help
    exit 1
  fi
fi

if [[ -z "$1" ]] || [[ "$1" == "riv" ]]; then
  if [[ "$ONLY_COMMANDS" == "" ]]; then
    [[ -z "$USAGE" ]] && echo -e "riv v$(riv version)\n"
    echo "Usage: riv <command> [<args...>]"
    [[ -z "$USAGE" ]] || exit
    echo
    echo "Some useful commands are:"
  fi

  print_summaries $USEFUL_COMMANDS

  if [[ "$ONLY_COMMANDS" == "" ]]; then
    echo
    echo "See \`riv help <command>\` for information on a specific command."
  fi
else
  COMMAND="$1"

  if [[ -n "$(command_path "$COMMAND")" ]]; then
    if [[ -n "$USAGE" ]]; then
      print_usage "$COMMAND"
    else
      print_help "$COMMAND"
    fi
  else
    echo "riv: no such command \`$COMMAND'" >&2
    exit 1
  fi
fi
