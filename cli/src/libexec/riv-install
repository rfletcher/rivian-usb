#!/usr/bin/env bash
#
# Summary: Install/upgrade rivian-usb
#
# Usage: riv install [opts] [version]
#
# Options:
#   -c Skip system configuration. No systemd service, etc.
#   -f Force reinstallation/configuration
#   -i Skip file installation
#   -s <path|url>: Install from this source repository. If this is a local
#      path, any specified version argument is ignored.
#      Default: https://github.com/rivian-community/rivian-usb
#   -t <path>: Install into this directory. Default: /opt/riv
#
# Examples:
#   Install the latest stable version and configure the system:
#     riv install
#   Do the same, but for a specific release:
#     riv install 0.0.1
#   Copy files into ./tmp, and skip system configuration:
#     riv install -c -t ./tmp
#   Configure the system to use the copy of `riv` already installed in /tmp
#     riv install -i -t /tmp

source "${_RIV_SHARE}/riv/lib/main.bash" || exit 1

## Check script dependencies

__require_dependencies curl tar rsync

## Set defaults

CONFIGURE_SYSTEM=1
COPY_FILES=1
FORCE=
TARGET=/opt/riv
SOURCE=
VERSION=

## Define functions

function handle_options() {
  case $1 in
    -) export RIV_OPTIONS=":cfis:t:";;
    c) CONFIGURE_SYSTEM=;;
    f) FORCE=1;;
    i) COPY_FILES=;;
    t) TARGET="$2";;
    s) SOURCE="$2";;
  esac
}

function handle_arguments() {
  VERSION="$1"
}

function main() {
  local CURRENT_VERSION="$(riv version)"
  local TMPDIR=

  function _check_version() {
    if ! __is_url "$SOURCE"; then
      __say "Installing from local source"
    else
      if [[ "$CURRENT_VERSION" == "$VERSION" ]]; then
        __say -n "Version '${VERSION}' is already installed. "
        if [[ "$FORCE" == "1" ]]; then
          echo "Reinstalling..."
        else
          echo
          return
        fi
      else
        __say "Installing version '${VERSION}'..."
      fi
    fi
  }

  function _cleanup() {
    rm -rf "$TMPDIR"

    __say "Done"
  }

  function _configure_mounts() {
    __say "Configuring mounts..."
    __say "(todo)"
  }

  function _copy_files() {
    __say "Writing to ${TARGET}..."

    mkdir -p "$TARGET" &&
    rsync -a --delete "${TMPDIR}/cli/src/" "${TARGET}/"
  }

  function _enable_service() {
    __say "Installing and starting the background service..."

    systemctl daemon-reload
    systemctl enable rivian-usb
    systemctl restart rivian-usb
  }

  function _fetch() {
    function _fetch_remote() {
      local FILE="${TMPDIR}.tar.gz"
      local URL="${SOURCE}"/archive/"${VERSION}".tar.gz

      __say "Downloading ${URL}..."

      pushd "$TMPDIR" >/dev/null &&
      curl --fail --silent --location "$URL" > "$FILE" &&
      tar zxf "$FILE" --strip-components=1 &&
      rm "$FILE" &&
      popd >/dev/null ||
      return 1
    }

    function _fetch_local() {
      __say "Reading from source..."

      rsync -a --delete "${SOURCE}/" "$TMPDIR"/
    }

    if __is_url "$SOURCE"; then
      _fetch_remote ||
      __die "There was a problem downloading the requested version"
    else
      _fetch_local ||
      __die "There was a problem reading from ${SOURCE}"
    fi
  }

  function _install() {
    __say "Installing files onto the system..."

    if ! __is_raspberry_pi && [[ "$FORCE" != "1" ]]; then
      __die "This doesn't look like a Pi-like system. Add -f configure anyway."
    fi

    local SOURCE_DIR FILE

    pushd "$TARGET" >/dev/null || return 1
    for SOURCE_DIR in bin etc; do
      if __is_raspberry_pi; then
        riv util-remount "/${SOURCE_DIR}" || return 1
      fi

      find "$SOURCE_DIR" -type d -exec mkdir -p "/{}" \;

      while read -r FILE; do
        ! test -e "$FILE" || rm -rf "/${FILE:?}"
        ln -fs "$(__abspath "${TARGET}/${FILE}")" "/$FILE"
      done < <(find "$SOURCE_DIR" -type f)
    done
    popd >/dev/null || return 1
  }

  function _prepare() {
    if __is_raspberry_pi; then
      riv util-remount "$TARGET" ||
      return 1
    fi

    TMPDIR=$(__tmpdir)
  }

  if [[ "$COPY_FILES" == "1" ]]; then
    _check_version &&
    _prepare &&
    _fetch &&
    _copy_files
  fi

  if [[ "$CONFIGURE_SYSTEM" == "1" ]]; then
    _install &&
    _enable_service &&
    _configure_mounts
  fi

  _cleanup
}

function validate_input() {
  SOURCE=$(__get_config "$SOURCE" updates/source)
  VERSION=$(__get_config "$VERSION" updates/version)

  if ! __is_url "$SOURCE" && ! test -d "$SOURCE"; then
    __die "Source (-s) must be either a URL or local repo path"
  fi
}
